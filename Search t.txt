<template>
  <main>
    <div class="search-bar">
      <input type="text" v-model="searchQuery" @input="searchCards" placeholder="Search cards...">
    </div>
    <div class="board">
      <div class="column" v-for="(column, columnIndex) in filteredColumns" :key="columnIndex">
        <h2>{{ column.title }}</h2>
        <div class="card" v-for="(card, cardIndex) in column.cards" :key="card.id" :draggable="true"
          @dragstart="dragStart(columnIndex, cardIndex)" @dragover="dragOver(columnIndex, cardIndex)"
          @dragend="dragEnd" @drop="drop(columnIndex, cardIndex)">
          {{ card.name }}
          <button class="delete-button" @click="deleteCard(columnIndex, cardIndex)">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      </div>
    </div>
  </main>
</template>

<script>
import axios from 'axios';

export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: 'Board',
  data() {
    return {
      columns: [],
      draggedCard: null,
      draggedCardIndex: null,
      searchQuery: '',
    };
  },
  mounted() {
    this.fetchData();
  },
  computed: {
    filteredColumns() {
      if (!this.searchQuery) {
        return this.columns;
      }
      return this.columns.map((column) => {
        return {
          ...column,
          cards: column.cards.filter((card) =>
            card.name.toLowerCase().includes(this.searchQuery.toLowerCase())
          ),
        };
      });
    },
  },
  methods: {
    async fetchData() {
      try {
        const response = await axios.get('http://localhost:3000/columns');
        this.columns = response.data;
      } catch (error) {
        console.error(error);
      }
    },
    dragStart(columnIndex, cardIndex) {
      this.draggedCard = this.columns[columnIndex].cards[cardIndex];
      this.draggedCardIndex = cardIndex;
    },
    dragOver(columnIndex, cardIndex) {
      if (this.draggedCard) {
        // Move the card to the new position
        const sourceColumn = this.columns.findIndex((col) => col.cards.includes(this.draggedCard));
        const cardToMove = this.columns[sourceColumn].cards.splice(this.draggedCardIndex, 1)[0];
        this.columns[columnIndex].cards.splice(cardIndex, 0, cardToMove);
        this.draggedCardIndex = cardIndex;
      }
    },
    dragEnd() {
      this.draggedCard = null;
      this.draggedCardIndex = null;
    },
    deleteCard(columnIndex, cardIndex) {
      this.columns[columnIndex].cards.splice(cardIndex, 1);
    },
    drop(columnIndex, cardIndex) {
      event.preventDefault();
    },
   searchCards() {
  // Convert the search query to lowercase
  const query = this.searchQuery.toLowerCase();

  // Filter the columns and cards based on the search query
  this.filteredColumns = this.columns.map((column) => {
    return {
      ...column,
      cards: column.cards.filter((card) => card.name.toLowerCase().includes(query)),
    };
  });
},

  },
};
</script>

<style scoped>
.board {
  display: flex;
}

.column {
  flex: 1;
  padding: 16px;
  background-color: #f2f2f2;
  border-radius: 4px;
  margin: 8px;
}

.card {
  background-color: #fff;
  padding: 8px;
  margin-bottom
